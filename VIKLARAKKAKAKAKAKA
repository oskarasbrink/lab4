; --- lab4_skal . asm
.equ VMEM_SZ = 5 ; # rows on display
.equ AD_CHAN_X = 0 ; ADC0 = PA0 , PORTA bit 0 X - led
.equ AD_CHAN_Y = 1 ; ADC1 = PA1 , PORTA bit 1 Y - led
.equ GAME_SPEED = 70 ; inter - run delay ( millisecs )
.equ PRESCALE = 7 ; AD - prescaler value
.equ BEEP_PITCH = 20 ; Victory beep pitch
.equ BEEP_LENGTH = 150 ; Victory beep length
; ---------------------------------------
; --- Memory layout in SRAM
.dseg
.org SRAM_START
POSX : .byte 1 ; Own position
POSY : .byte 1
TPOSX : .byte 1 ; Target position
TPOSY : .byte 1
LINE : .byte 1 ; Current line
VMEM : .byte VMEM_SZ ; Video MEMory
SEED : .byte 1 ; Seed for Random
; ---------------------------------------
; --- Macros for inc / dec - rementing
; --- a byte in SRAM
.macro INCSRAM ; inc byte in SRAM
lds r20 , @0
inc r20
sts @0 , r20
.endmacro
.macro DECSRAM ; dec byte in SRAM
lds r20 , @0
dec r20
sts @0 , r20
.endmacro

//macron

//////////////////////V våra macros
.macro JOYSTICK_Y
 ldi @0,(1|1<<adlar)
 out admux,@0
 
 sbi adcsra,adsc
 sbic adcsra,adsc
 rjmp pc-1
 in @0, ADCH;
 .endmacro

 
 .macro JOYSTICK_X
 ldi @0,(1<<adlar)
 out admux,@0

 ;cli clear interrupts lool
 sbi adcsra,adsc
 sbic adcsra,adsc
 rjmp pc-1
 in @0, ADCH;
 .endmacro
; ---------------------------------------
; --- Code


.cseg
.org $0
jmp START
.org INT0addr
jmp MUX
START :
ldi r16,HIGH(RAMEND)
out SPH,r16
ldi r16,LOW(RAMEND)
out SPL,r16 ; satt stackpekaren
call HW_INIT
call WARM
RUN :
call JOYSTICK
call ERASE
call UPDATE
call DELAY
;*** Vanta en stund sa inte spelet gar for fort ***
;*** Avgor om traff ***
lds r16,POSY
mov r17,r16
swap r17
lds r16,POSX
add r17,r16
lds r18,TPOSY
swap r18
lds r16,TPOSX
add r18,r16
cp r17,r18
brne NO_HIT
ldi r16 , BEEP_LENGTH
call BEEP
call WARM
NO_HIT:
jmp RUN
; ---------------------------------------
; --- Multiplex display
; --- Uses : r16
MUX :; fixa adresser:
	push r19
	push r16
	in r16,SREG
	push r16

	clr r19
	out PORTB,r19
	lds r19,LINE
	subi r19,-$10
	cpi r19,$50
	brne NOT_EQUAL
	clr r19
NOT_EQUAL:
	ldi XL,LOW(VMEM)
	ldi XH,HIGH(VMEM)
	swap r19
	add XL,r19
	swap r19
	ld r16,X
	out PORTA,r19
	out PORTB,r16
	sts LINE,r19
	incsram SEED

	pop r16
	out SREG,r16
	pop r16
	pop r19

/**** skriv rutin som handhar multiplexningen och ***
*** utskriften till diodmatrisen . Oka SEED . ****/
reti
; ---------------------------------------
; --- JOYSTICK Sense stick and update POSX , POSY
; --- Uses :

JOYSTICK:
	JOYSTICK_Y r16
	JOYSTICK_X r17

	cpi r17,$F0
	brsh RIGHT;höger
	cpi r17,$E
	brlo LEFT;vänster
	jmp NEXT
RIGHT:
	INCSRAM POSX
	jmp NEXT
LEFT:
	DECSRAM POSX
	jmp NEXT
NEXT:
	cpi r16,$F0
	brsh UPP;UPP
	cpi r16,$E
	brlo NER;NER
	jmp DONE
UPP:
	incsram POSY
	jmp DONE
NER:	

	decsram POSY
	
DONE:
	call LIMITS
	ret


;*** skriv kod som okar eller minskar POSX beroende ***
;*** pa insignalen fran A/D - omvandlaren i X - led ... ***
;*** ... och samma for Y - led ***
JOY_LIM :
call LIMITS ; don ’ t fall off world !
ret
; ---------------------------------------
; --- LIMITS Limit POSX , POSY coordinates
; --- Uses : r16 , r17
LIMITS :
lds r16 , POSX ; variable
ldi r17 ,7 ; upper limit +1
call POS_LIM ; actual work
sts POSX , r16
lds r16 , POSY ; variable
ldi r17 ,5 ; upper limit +1
call POS_LIM ; actual work
sts POSY , r16
ret
POS_LIM :
ori r16 ,0 ; negative ?
brmi POS_LESS ; POSX neg = > add 1
cp r16 , r17 ; past edge
brne POS_OK
subi r16 ,2
POS_LESS :
inc r16
POS_OK :
ret
; ---------------------------------------
; --- UPDATE VMEM
; --- with POSX /Y , TPOSX /Y
; --- Uses : r16 , r17 , Z
UPDATE :
clr ZH
ldi ZL , LOW ( POSX )
call SETPOS
clr ZH
ldi ZL , LOW ( TPOSX )
call SETPOS
ret
; --- SETPOS Set bit pattern of r16 into * Z
; --- Uses : r16 , r17 , Z
; --- 1 st call Z points to POSX at entry and POSY at exit
; --- 2 nd call Z points to TPOSX at entry and TPOSY at exit
SETPOS :
ld r17 , Z + ; r17 = POSX
call SETBIT ; r16 = bitpattern for VMEM + POSY
ld r17 , Z ; r17 = POSY Z to POSY
ldi ZL , LOW ( VMEM )
add ZL , r17 ; Z= VMEM + POSY , ZL = VMEM +0..4
ld r17 , Z ; current line in VMEM
or r17 , r16 ; OR on place
st Z , r17 ; put back into VMEM
ret
; --- SETBIT Set bit r17 on r16
; --- Uses : r16 , r17
SETBIT :
ldi r16 , $01 ; bit to shift
SETBIT_LOOP :
dec r17
brmi SETBIT_END ; til done
lsl r16 ; shift
jmp SETBIT_LOOP
SETBIT_END :
ret
; ---------------------------------------
; --- Hardware init
; --- Uses :
HW_INIT :
clr r16
/*** Konfigurera hardvara och MUX - avbrott enligt ***
*** ditt elektriska schema . Konfigurera ***/
ser r16
out DDRB,r16
ldi r16,$F0
out DDRA,r16
ldi r16,3
out MCUCR,r16 ; set int0 och int1 att interrupta stigande
ldi r16,(1<<INT0);	*** flanktriggat avbrott pa INT0 ( PD2 ). 
out GICR,r16
ldi r16,(1<<aden);	aden=enable ((PRESCALE<<adps))? adps (adprescaler) sätts i varje fall i acsra (adc statusregister) (s.213 i PDF).
out adcsra,r16;	slår på strömmen till ad-hardwarewere
sei ; display on
ret
; ---------------------------------------
; --- WARM start . Set up a new game .
; --- Uses :
WARM :
ldi r16,0
sts POSX,r16
ldi r16,2
sts POSY,r16
push r0
push r0
call RANDOM ; RANDOM returns TPOSX , TPOSY on stack
;*** Satt startposition ( TPOSX , TPOSY ) ***
pop r16
sts TPOSX,r16
pop r16
sts TPOSY,r16
call ERASE
ret
; ---------------------------------------
; --- RANDOM generate TPOSX , TPOSY
; --- in variables passed on stack .
; --- Usage as :
; --- push r0
; --- push r0
; --- call RANDOM
; --- pop TPOSX
; --- pop TPOSY
; --- Uses : r16
RANDOM :
in r16 , SPH
mov ZH , r16
in r16 , SPL
mov ZL , r16
lds r16 , SEED
andi r16,7
cpi r16,5
brmi ASD
subi r16,3
ASD:
	std Z+4,r16
	subi r16,-2
	std Z+3,r16
;*** Anvand SEED for att berakna TPOSX ***
;*** Anvand SEED for att berakna TPOSY ***
;*** ; store TPOSX 2..6
;*** ; store TPOSY 0..4
	ret
; ---------------------------------------
; --- ERASE videomemory
; --- Clears VMEM .. VMEM +4
; --- Uses :
ERASE :
;*** Radera videominnet ***
ldi ZL,LOW(VMEM)
ldi ZH,HIGH(VMEM)
ldi r16,0
LOOP:
	st Z+,r16
	cpi ZL,$6A
	brne LOOP
	ret

DELAY:
push r18
push r17
push r16
	lds r18,GAME_SPEED
D_3:
	ldi r17,10
D_2:
	ldi r16,$1F
D_1:
	dec r16
	brne D_1
	dec r17
	brne D_2
	dec r18
	brne D_3

pop r16
pop r17
pop r19
	ret

; ---------------------------------------
; --- BEEP ( r16 ) r16 half cycles of BEEP - PITCH
; --- Uses :

BEEP:
	push r17
	push r18
	ldi r16,BEEP_LENGTH
BEEPER:	
    ldi r17, $10
    sbi PORTB, 7
    call TON_BEEP
    ldi r17, $10
    cbi PORTB,0
    call TON_BEEP
    dec R16
    BRNE BEEPER
	pop r18
	pop r17
    ret

TON_BEEP:
    ldi r18, BEEP_PITCH
WAIT:
    dec r18
    BRNE WAIT
    dec r17
    BRNE TON_BEEP
    ret
